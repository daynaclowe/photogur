1. Creating a New Rails App

Commit 24386a0

Rails is a web framework. What this means is it's a bunch of files, and in these files there are lines of code, and you can use these lines of code to build a web application. Otherwise if you built a web application you would have to write many of these lines of code on your own anyways.

So when we call someone a Rails developer what we're saying is they understand how to manipulate these lines of code to make the web application they want to build. This is exactly what we're going to learn how to do over the course of the next few weeks.

So first things first, let's actually get these lines of code! Run this on your command line:

$ rails new photogur

This creates a folder called photogur and creates all of the Rails files inside of it. If you open this folder in Sublime you can see all of these files and these files in folders on the left-hand side:

Directory Structure of Rails

This is very overwhelming! We just went from zero files to oh-I-don't-know-how-many. Just ignore all of them except for the ones we are going to use in this app:

db/

This is where all the stuff related to your db goes.

config/

Files that configure your app go here, for example, files that configure your routes or your database.

app/

You'll spend most of your time here. This is where your whole app goes, from the actual logic of the app (you can favourite, thumbs up, or thumbs down a video) to what you actually see (a video with a heart below it and two thumbs).

You can read more about the directory structure of Rails here or here.

And there you go! We've created a new Rails app. At this point you should initialize Git, stage all of your files, and make your first commit:

$ git init
$ git add --all
$ git commit -m "Initial commit"

2. Getting http://localhost:3000/pictures to work

Commit ea427ce

Now that we've created a Rails app, if we want to visit its webpages we have to run a server. The way we do this is with:

$ rails server

(Make sure you're inside the folder photogur/ first.)

What this will do is run a server at the URL http://localhost:3000. Visit the URL and see what happens! You should see this.

We want to create a new webpage at http://localhost:3000/pictures. We want this webpage to show a list of pictures. If you visit the URL though you'll get a Routing error saying No route matches [GET] "/pictures". The way you fix this error is by going into your Routes file and adding some code so that it looks like this:

config/routes.rb:

Rails.application.routes.draw do
  get 'pictures' => 'pictures#index'

  # Ignore the comments below for now
  # They are just documentation
end

Now if you go to http://localhost:3000/pictures you should see a new message. This is Rails telling you the next thing you need to do to get the URL to work. It should say uninitialized constant PicturesController. To fix this we need to create a file with a very specific name in a very specific location. Luckily Rails has "generators" to help you define and create special files.

$ rails generate controller pictures

You'll noticed that this ends up generating many files. Ignore the others for now, we'll focus on app/controllers/pictures_controller.rb, which should look like the following:

class PicturesController < ApplicationController

end

ApplicationController is a class that is given to us by Rails. PicturesController is a new class we're making. If we visit http://localhost:3000/pictures now, we should see yet another error.

Now it should be saying "Unknown Action" and below it "The action 'index' could not be found for PicturesController". To fix this we need to add some code to pictures_controller.rb:

app/controllers/pictures_controller.rb:

class PicturesController < ApplicationController
  def index
  end
end

If you visit the URL yet again, can you guess what will happen? Yep, another error.

But let's make a commit right now because we've done some good work.

$ git add --all
$ git commit -m "Create route and controller for http://localhost:3000/pictures"

You can understand now what this line in routes.rb does now:

get 'pictures' => 'pictures#index'

Match the HTTP Request GET with the URL /pictures to the index action in the PicturesController.
What we covered in this commit

    $ rails server
    http://localhost:3000 renders default page
    Creating a route, the controller, and an action for http://localhost:3000/pictures

3. Making pictures show at /pictures

Commit 91a07fc

In the last commit we saw a "Template is missing" error. Just like when we made our controller, we have to create another file with a very specific name in a very specific location (inside a folder called app/views/pictures/).

$ touch app/views/pictures/index.html.erb

Now if you go to http://localhost:3000/pictures, you won't see anything! Isn't that better than an error!

What's happening is the file you created, index.html.erb, doesn't have anything in it. Let's add <h1>Pictures</h1> to it and it should show up.

Adding title to index.html.erb

Remember what we wanted at the beginning was to show a list of pictures at this URL. What we need now are the actual pictures.

app/controllers/pictures_controller.rb:

class PicturesController < ApplicationController

  def index
    @pictures = [
      {
        :title  => "The old church on the coast of White sea",
        :artist => "Sergey Ershov",
        :url    => "http://bitmakerlabs.s3.amazonaws.com/photogur/house.jpg"
      },
      {
        :title  => "Sea Power",
        :artist => "Stephen Scullion",
        :url    => "http://bitmakerlabs.s3.amazonaws.com/photogur/wave.jpg"
      },
      {
        :title  => "Into the Poppies",
        :artist => "John Wilhelm",
        :url    => "http://bitmakerlabs.s3.amazonaws.com/photogur/girl.jpg"
      }
    ]
  end

end

We can use these pictures in the view, index.html.erb, through the variable @pictures, even though it is defined in the controller, pictures_controller.rb. Why this works is Rails magic.

So we could render these pictures in the view:

app/views/pictures/index.html.erb:

<h1>Pictures</h1>

<% @pictures.each do |picture| %>
  <p><%= picture[:title] %>, <%= picture[:artist] %></p>
  <img src="<%= picture[:url] %>">
<% end %>

You may have noticed the format of the file is ERB. ERB stands for eRuby and it allows you to embed Ruby into a text document. Anything between <%= and %> is Ruby code, and whatever the Ruby code returns is put into that spot in the document.

So <%= picture[:title] %> returns the title of the picture, and <%= picture[:artist] %> returns the artist of the picture, so the line:

<p><%= picture[:title] %>, <%= picture[:artist] %></p>

becomes, for example:

<p>The old church on the coast of White sea, Sergey Ershov</p>

As you know, we can use Ruby in other ways. We can be given a hash of pictures, and get each picture from the hash. This is exactly what the line <% @pictures.each do |picture| %> is doing.

One important note to make is <% %> (without the equals sign) does not put what the code returns into the document. So if you did:

<p><% "My name is Neo" %></p>

That string would not be returned into the document:

<p></p>

Visit http://localhost:3000/pictures and you should see the three pictures with their titles and artists!

Let's make a commit.

$ git add --all
$ git commit -m "Making pictures show at /pictures"

What we covered in this commit

    Creating the view (index.html.erb)
    Creating @pictures in pictures#index (in other words in the index action in the PicturesController)
    Writing HTML and ERB code to render @pictures

4. Making each picture show at its own URL with dynamic routes

Commit 5ca5f35

What we want to do now is be able to see each picture individually, at their own URLs. First things first, the routes!

config/routes.rb:

Rails.application.routes.draw do

  get 'pictures' => 'pictures#index'

  get 'pictures/' => 'pictures#picture0'
  get 'pictures/1' => 'pictures#picture1'
  get 'pictures/2' => 'pictures#picture2'

end

Just kidding! You don't have to do this part. Imagine if we had 100 pictures, this would be ridiculous to implement. Let's use a dynamic route instead.

config/routes.rb:

Rails.application.routes.draw do
  get 'pictures' => 'pictures#index'
  get 'pictures/:id' => 'pictures#show', as: 'picture'
end

When we say 'pictures/:id', what we're saying is anything can take the place of :id â€“ think of it as a wildcard. So this URL will route pictures/1, pictures/2, pictures/10000, even pictures/hello. (You might think this means the order you put the routes in matters, and you'd be right.)

When we say as: "picture", what we're saying is let us refer to this route as picture_path: the String is prepended to _path. So if I said as: "hello", the path would be hello_path. Moreover, because this route requires an ID (the wildcard, remember?), when we use this path we need to pass in an ID, so for example, picture_path(1).

Now that we've created the routes we need to define the new action in the controller that we already have (PicturesController). Eventually in the view we want to be able to render the picture corresponding to the URL, so we need to find the right picture in the action.

app/controllers/pictures_controller.rb:

class PicturesController < ApplicationController

  def index
    @pictures = [
      {
        :title  => "The old church on the coast of White sea",
        :artist => "Sergey Ershov",
        :url    => "http://bitmakerlabs.s3.amazonaws.com/photogur/house.jpg"
      },
      {
        :title  => "Sea Power",
        :artist => "Stephen Scullion",
        :url    => "http://bitmakerlabs.s3.amazonaws.com/photogur/wave.jpg"
      },
      {
        :title  => "Into the Poppies",
        :artist => "John Wilhelm",
        :url    => "http://bitmakerlabs.s3.amazonaws.com/photogur/girl.jpg"
      }
    ]
  end

  def show
    @pictures = [
      {
        :title  => "The old church on the coast of White sea",
        :artist => "Sergey Ershov",
        :url    => "http://bitmakerlabs.s3.amazonaws.com/photogur/house.jpg"
      },
      {
        :title  => "Sea Power",
        :artist => "Stephen Scullion",
        :url    => "http://bitmakerlabs.s3.amazonaws.com/photogur/wave.jpg"
      },
      {
        :title  => "Into the Poppies",
        :artist => "John Wilhelm",
        :url    => "http://bitmakerlabs.s3.amazonaws.com/photogur/girl.jpg"
      }
    ]
    @picture = @pictures[params[:id].to_i]
  end

end

Now let's create the view associated to this action:

$ touch app/views/pictures/show.html.erb

In this view we want the following:

app/views/show.html.erb:

<p><%= @picture[:title] %>, <%= @picture[:artist] %></p>
<img src="<%= @picture[:url] %>">

If you visit http://localhost:3000/pictures/0, http://localhost:3000/pictures/1, or http://localhost:3000/pictures/2, you'll see a different picture at each URL.

Great. Now you can make a paparazzi website. I'm totally enthusiastic about that.

Remember to commit:

$ git add --all
$ git commit -m "Making each picture show at its own URL with dynamic routes"

What we covered in this commit

    Using dynamic routes (get 'pictures/:id' => 'pictures#show')
    Creating actions in the controller (def show; end)
    Creating views (show.html.erb)

5. Adding feature to create new picture using HTML form

Commit 41f31c8

What we want now is an ability to create new pictures by filling out a form. As always the first file we touch is routes.rb.

config/routes.rb:

Rails.application.routes.draw do
  get 'pictures' => 'pictures#index'

  post 'pictures' => 'pictures#create' # this is a new line of code
  get 'pictures/new' => 'pictures#new' # this is also a new line of code

  get 'pictures/:id' => 'pictures#show'
end

This time we created two new routes. You'll see why we need this. For now let's create the actions in the controller:

app/controllers/pictures_controller.rb:

class PicturesController < ApplicationController
  .
  .
  .
  def new
  end

  def create
  end
end

(Instead of copying and pasting the whole file, I'm going to start just showing the new lines of code to add to the file and I'll trust you to put them in the right place.)

We have to create the view now. Let's take a step back here for a moment. Have you started to notice a pattern? We work on the routes, then the controller, write some actions, and then make views? We call this RCAV, it stands for Routes, Controller, Actions, and Views.

We need to create a new view named new.html.erb and inside of it we are going to make a form. Let's use something Rails provides us that are called Form helpers. These Form helpers are methods you can invoke that write HTML code for us. This also generates special code that ensures that Rails is secure.

app/views/pictures/new.html.erb:

<h1>Add a picture</h1>
<%= form_tag "/pictures" do %>
  <p>
    <%= label_tag "artist" %><br>
    <%= text_field_tag "artist" %>
  </p>
  <p>
    <%= label_tag "title" %><br>
    <%= text_field_tag "title" %>
  </p>
  <p>
    <%= label_tag "url" %><br>
    <%= text_field_tag "url" %>
  </p>
  <p>
    <%= submit_tag "Save" %>
  </p>
<% end %>

To use the methods Rails provides us you'll notice we have to do use ERB.

Now we can talk about why we needed a second route. When we click on the Submit button for this form it will go to POST /pictures. When we click on Submit we want the new page to have the Title, Artist, and URL we put in the form, so let's update our create action in our controller:

app/controllers/pictures_controller.rb:

class PicturesController < ApplicationController
  .
  .
  .
  def create
    render :text => "Saving a picture. URL: #{params[:url]}, Title: #{params[:title]}, Artist: #{params[:artist]}"
  end
end

Just like how we can get the wildcard in the URL from the params hash, we can get data from a form too!

Now when I fill in this form:

Screenshot of filling in the form

And I submit it I get:

Screenshot of form submission

You might notice the picture isn't saved at all in any real sense. If you go to /pictures, you certainly won't see it there. We'll fix this later, in the meantime, ssshhhhh.

Commit:

$ git add --all
$ git commit -m "Adding feature to create new picture using HTML form"

What we covered in this commit

    Creating /pictures/new, pictures#new, and new.html.erb
    Using Form helpers to generate a form

6. Creating Picture model in database

Commit 6f87b06

When you go to Imgur and you upload a picture, the picture is saved to their database. So when users come to our website and they make new pictures, we need to save them into the database. Let's forget about Rails and this whole tutorial for a second.

In real life, when you get new data what do you do if you want to record it and make it easy to read? Well, one of the things you could do is draw a table on a piece of paper. If you have data concerning pictures, you could have rows of pictures and columns of different attributes belonging to each picture.
	Artist 	Title 	URL
Picture #1 	The old church on the coast of White sea 	Sergey Ershov 	http://bitmakerlabs.s3.amazonaws.com/photogur/house.jpg
Picture #2 	Sea Power 	Stephen Scullion 	http://bitmakerlabs.s3.amazonaws.com/photogur/wave.jpg
Picture #3 	Into the Poppies 	John Wilhelm 	http://bitmakerlabs.s3.amazonaws.com/photogur/girl.jpg

This is exactly what we do if we want to be able to save pictures we've created. In Rails, the table is called a model. You have a model of a Picture, and you can create instances of this model to create new pictures.

To generate a new model type this into your command line:

$ rails generate model Picture artist:string title:string url:string

After rails generate model Picture are the attributes you want to give to the model. In this case we're saying we want three attributes, artist, title, and url, and we want each of them to have the datatype string. If we had an attribute for file_size, the datatype would be an integer (i.e. file_size:integer).

When you run this command Rails will create many files, but for now let's focus on two. If you open this file in Sublime you'll see:

app/models/picture.rb:

class Picture < ActiveRecord::Base
end

We're creating a new class called Picture, it inherits from ActiveRecord::Base.

The second file the command creates is [timestamp]_create_pictures.rb in db/migrate. [timestamp] will be a string of what seems random numbers but actually are the date and time when you ran the command. In this file you'll find:

class CreatePictures < ActiveRecord::Migration
  def change
    create_table :pictures do |t|
      t.string :artist
      t.string :title
      t.string :url

      t.timestamps
    end
  end
end

This file tells Rails how to change the database in the way we want. We actually need to run this file and apply these changes!

$ rake db:migrate

Whenever you create a new model, a new migration is automatically made for you. Migrations are instructions you write for how you want the database to be changed. By saving the instructions into files, as opposed to doing it, for example, on the command line, other people can clone these instructions and run them right away to get exactly the same database you have.

With that, we've created a new model for Picture and migrated the database. Let's commit:

$ git add -all
$ git commit -m "Creating Picture model in database"

What we covered in this commit

    How to generate a new model: $ rails generate model Picture artist:string title:string url:string
    How to migrate changes to the database: $ rake db:migrate

7. Moving @pictures in pictures_controller.rb into database

Commit 4481319

Earlier we made three pictures in the controller. This is absolutely against good practicesâ€”the data should always be going into the models. Let's fix this right now by editing the a file called seeds.rb:

db/seeds.rb:

Picture.create!(
  :title  => "The old church on the coast of White sea",
  :artist => "Sergey Ershov",
  :url    => "http://bitmakerlabs.s3.amazonaws.com/photogur/house.jpg"
)

Picture.create!(
  :title  => "Sea Power",
  :artist => "Stephen Scullion",
  :url    => "http://bitmakerlabs.s3.amazonaws.com/photogur/wave.jpg"
)

Picture.create!(
  :title  => "Into the Poppies",
  :artist => "John Wilhelm",
  :url    => "http://bitmakerlabs.s3.amazonaws.com/photogur/girl.jpg"
)

Picture with a capital lets Rails know you are talking about the model. So Picture.create creates a new instance of the model Picture.

To run these seeds and populate the database with these pictures we type this on the command line:

$ rake db:seed

We can update our controller now to get its data not from a hash we make, but from the database. It will look like this:

app/controllers/pictures_controller.rb:

class PicturesController < ApplicationController

  def index
    @pictures = Picture.all
  end

  def show
    @picture = Picture.find(params[:id])
  end

  def new
  end

  def create
    render :text => "Saving a picture. URL: #{params[:url]}, Title: #{params[:title]}, Artist: #{params[:artist]}"
  end

end

The controller is much skinnier now!

At this point we also want to update our views to reflect that we're using an ActiveRecord model and not a hash anymore. We should be using methods to access the information on our model, instead of hash indices.

app/views/pictures/index.html.erb

<h1>Pictures</h1>

<% @pictures.each do |picture| %>
  <p><%= picture.title %>, <%= picture.artist %></p>
  <img src="<%= picture.url %>">
<% end %>

app/views/pictures/show.html.erb

<p><%= @picture.title %>, <%= @picture.artist %></p>
<img src="<%= @picture.url %>">

Commit:

$ git add --all
$ git commit -m "Moving @pictures in pictures_controller.rb into database"

By the way it would be a good idea to check the website still functions as it should. It should be noted the pictures are now numbered 1 through 3, not 0 through 2 anymore.
What we covered in this commit

    Creating pictures in seeds.rb
    Running seeds.rb with $ rake db:seed
    Accessing the Picture model in the controller

8. Refactoring to save new pictures in database

Commit 4c718fc

Now we can get new pictures to be saved into the database! We just have to refactor our controller:

app/controllers/pictures_controller.rb:

class PicturesController < ApplicationController

  def new
    @picture = Picture.new
  end

  def create
    # make a new picture with what picture_params returns (which is a method we're calling)
    @picture = Picture.new(picture_params)
    if @picture.save
      # if the save for the picture was successful, go to index.html.erb
      redirect_to pictures_url
    else
      # otherwise render the view associated with the action :new (i.e. new.html.erb)
      render :new
    end
  end

  private
  def picture_params
    params.require(:picture).permit(:artist, :title, :url)
  end

end

You'll notice we had to define a new Picture in the new action. This is because we are going to update the view with this:

app/views/pictures/new.html.erb:

<h1>Add a picture</h1>
<%= form_for @picture do |f| %>
  <p>
    <%= f.label "artist" %><br>
    <%= f.text_field "artist" %>
  </p>
  <p>
    <%= f.label "title" %><br>
    <%= f.text_field "title" %>
  </p>
  <p>
    <%= f.label "url" %><br>
    <%= f.text_field "url" %>
  </p>
  <p>
    <%= f.submit "Save" %>
  </p>
<% end %>

Now the form is for @picture, which comes from the model in the controller. In other words the form is now setup to work with the model.

And there you have it! Now when you fill out the form and click the Submit button, you should see your new picture on the index page. We're well on our way to a MVP, a minimal viable product.

Commit:

$ git add --all
$ git commit -m "Refactoring to save new pictures in database"

What we covered in this commit

    Updating new and create actions in PicturesController
    Updating new.html.erb with form_for helper

9. Configuring root as pictures#index

Commit 7d5e3ec

Now we're going to look after a smaller detail in this commit. If you go to http://localhost:3000, the default view is still rendered. This is hardly professional! This needs fixing immediately.

We need to configure the routes so something shows up at that URL:

config/routes.rb:

Rails.application.routes.draw do
  root 'pictures#index'
  get 'pictures' => 'pictures#index'
  .
  .
  .
end

Now http://localhost:3000 renders the index.html.erb page. Professionalism is never a bad thing.

Commit:

$ git add --all
$ git commit -m "Configuring root as pictures#index"

10. Refactoring views to use helpers and adding navigation

Commit fe19b39

What we want to do now is connect all these webpages we've made. We want it so that when we're on the index page we can click a link to go to the page to make a new picture. Or we can click on a picture to go to its show page. And when we're on the new or show page we can go back to the index page.

app/views/pictures/new.html.erb:

<h1>Add a picture</h1>
<%= link_to "Back to Pictures", pictures_url %>

.
.
.

Notice we are using a helper, link_to, to make a link. The first parameter is the text and the second parameter is the URL clicking the text takes you to. In this case clicking on "Back to Pictures" takes you to the path pictures_url, which is /pictures.

app/views/pictures/index.html.erb:

<h1>Pictures (<%= @pictures.length %>)</h1>
<%= link_to "New Picture", "/pictures/new" %>

<% @pictures.each do |picture| %>
  <p><%= picture.title %>, <%= picture.artist %></p>
  <%= link_to image_tag(picture.url), "/pictures/#{picture.id}" %>
<% end %>

Notice we are using a helper now, image_tag, to render the picture, which we just have to pass in the picture's URL.

app/views/pictures/show.html.erb:

<%= link_to "Back to Pictures", pictures_url %>

<p><%= @picture.title %>, <%= @picture.artist %></p>
<%= image_tag @picture.url %>

Commit:

$ git add --all
$ git commit -m "Refactoring views to use helpers and adding navigation"

What we covered in this commit:

    Adding links in views to connect each other using link_to and image_tag

11. Adding feature to edit pictures

Commit 539aad8

Now we want to be able to, when we're on the show page of a picture, click a link to edit it. First we have to make a route for the edit page:

config/routes.rb:

Rails.application.routes.draw do
  .
  .
  .
  get 'pictures/:id/edit' => "pictures#edit", as: "edit_picture"
  patch 'pictures/:id' => "pictures#update"
  .
  .
  .
end

Then we have to make two new actions in the controller:

app/controllers/pictures_controller.rb:

class PicturesController < ApplicationController
  .
  .
  .
  def edit
    @picture = Picture.find(params[:id])
  end

  def update
    @picture = Picture.find(params[:id])

    if @picture.update_attributes(picture_params)
      redirect_to "/pictures/#{@picture.id}"
    else
      render :edit
    end
  end
end

Create a new view for edit:

app/views/pictures/edit.html.erb:

<h1>Edit Picture</h1>

<p>
  <%= link_to "Back", @picture %>
</p>

<%= form_for @picture do |f| %>
  <p>
    <%= f.label "artist" %><br>
    <%= f.text_field "artist" %>
  </p>
  <p>
    <%= f.label "title" %><br>
    <%= f.text_field "title" %>
  </p>
  <p>
    <%= f.label "url" %><br>
    <%= f.text_field "url" %>
  </p>
  <p>
    <%= submit_tag "Save" %>
  </p>
<% end %>

And last but not least make a link on the show page of each picture to go to the edit form:

app/views/pictures/show.html.erb:

<%= link_to "Back to Pictures", pictures_url %> | <%= link_to "Edit", edit_picture_path(@picture) %>
.
.
.

Commit:

$ git add --all
$ git commit -m "Adding feature to edit pictures"

What we covered in this commit

    New route /pictures/:id/edit
    edit and update actions in PicturesController
    edit.html.erb
    Adding link to edit.html.erb in show.html.erb

What we covered in this commit

    resources :pictures

12. Adding feature to delete pictures

Commit c25413e

This is our last commit! We've come a long way. The last thing we want to do is be able to delete a picture. You know, sometimes we regret a picture we've uploaded and we want to delete it. For a feature that is so important there is actually surprisingly little code. Write the delete route in our routes.

config/routes.rb:

Rails.application.routes.draw do
  .
  .
  .
  delete 'pictures/:id' => 'pictures#destroy', as: "delete_picture"

  root 'pictures#index'
end

There is an action to be made in the controller:

app/controllers/pictures_controller.rb:

class PicturesController < ApplicationController
  .
  .
  .
  def destroy
    @picture = Picture.find(params[:id])
    @picture.destroy
    redirect_to pictures_url
  end
  .
  .
end

And a link to be made in the show page:

<%= link_to "Back to Pictures", pictures_url %> | <%= link_to "Edit", edit_picture_path(@picture) %> | <%= link_to "Delete", @picture, method: :delete, data: {confirm: "Are you sure you want to delete this picture?"}  %>

data:confirm is the way of telling Rails you want to popup a dialog box and confirm with the user. method: lets Rails know what HTTP request to use on the URL. So the URL is /picture (which is denoted in this code with @picture), and the HTTP request is DELETE, which is obviously a different route from GET /pictures.

And there you have it! You can delete a picture now.

Commit:

$ git add --all
$ git commit -m "Adding feature to delete pictures"

What we covered in this commit

    Destroy action in controller
    Link to delete picture in show.html.erb

13. Refactoring routes to use resources

Commit 74064c5

Many applications follow the CRUD patternâ€”create, read, update, and delete. If you look at our routes now:

config/routes.rb:

Rails.application.routes.draw do
  root 'pictures#index'

  post 'pictures' => "pictures#create"

  get 'pictures' => 'pictures#index'
  get 'pictures/new' => 'pictures#new'
  get 'pictures/:id/edit' => 'pictures#edit', as: 'edit_picture'
  get 'pictures/:id' => 'pictures#show', as: 'picture'
end

You'll see they follow this CRUD pattern. Because us web developers are way too busy, Rails offers us a nice way to make all of these routes in one line of code, in addition to another one for deleting a picture, which we'll get to in the next commit.

config/routes.rb:

Rails.application.routes.draw do
  root 'pictures#index'

  resources :pictures
end

Let's refactor our routes to do this and then commit!

$ git add --all
$ git commit -m "Refactoring routes to use resources"

This is an app called Photogur. In it you can see a gallery of pictures, see each picture individually, edit or delete them, and create a new picture.

Congratulations. You just made your first Rails app. How do you feel?
Next Steps: Put Your Work Online!

Share your new app with the world, by deploying it to Heroku. Follow the next tutorial on Deploying to Heroku






== README

This README would normally document whatever steps are necessary to get the
application up and running.

Things you may want to cover:

* Ruby version

* System dependencies

* Configuration

* Database creation

* Database initialization

* How to run the test suite

* Services (job queues, cache servers, search engines, etc.)

* Deployment instructions

* ...


Please feel free to use a different markup language if you do not plan to run
<tt>rake doc:app</tt>.
